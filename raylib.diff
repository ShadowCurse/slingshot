diff --git a/src/build.zig b/src/build.zig
index 4134c4a8..5a2c6f2c 100644
--- a/src/build.zig
+++ b/src/build.zig
@@ -53,33 +53,33 @@ pub fn addRaylib(b: *std.Build, target: anytype, optimize: std.builtin.OptimizeM
         raylib.addIncludePath(.{ .cwd_relative = srcdir ++ "external/glfw/include" });
     }
 
-    addCSourceFilesVersioned(raylib, &.{
+    addCSourceFilesVersioned(b, raylib, &.{
         "rcore.c",
         "utils.c",
     }, raylib_flags_arr.items);
 
     if (options.raudio) {
-        addCSourceFilesVersioned(raylib, &.{
+        addCSourceFilesVersioned(b, raylib, &.{
             "raudio.c",
         }, raylib_flags_arr.items);
     }
     if (options.rmodels) {
-        addCSourceFilesVersioned(raylib, &.{
+        addCSourceFilesVersioned(b, raylib, &.{
             "rmodels.c",
         }, raylib_flags_arr.items);
     }
     if (options.rshapes) {
-        addCSourceFilesVersioned(raylib, &.{
+        addCSourceFilesVersioned(b, raylib, &.{
             "rshapes.c",
         }, raylib_flags_arr.items);
     }
     if (options.rtext) {
-        addCSourceFilesVersioned(raylib, &.{
+        addCSourceFilesVersioned(b, raylib, &.{
             "rtext.c",
         }, raylib_flags_arr.items);
     }
     if (options.rtextures) {
-        addCSourceFilesVersioned(raylib, &.{
+        addCSourceFilesVersioned(b, raylib, &.{
             "rtextures.c",
         }, raylib_flags_arr.items);
     }
@@ -96,7 +96,7 @@ pub fn addRaylib(b: *std.Build, target: anytype, optimize: std.builtin.OptimizeM
 
     switch (getOsTagVersioned(target)) {
         .windows => {
-            addCSourceFilesVersioned(raylib, &.{
+            addCSourceFilesVersioned(b, raylib, &.{
                 "rglfw.c",
             }, raylib_flags_arr.items);
             raylib.linkSystemLibrary("winmm");
@@ -107,7 +107,7 @@ pub fn addRaylib(b: *std.Build, target: anytype, optimize: std.builtin.OptimizeM
         },
         .linux => {
             if (!options.platform_drm) {
-                addCSourceFilesVersioned(raylib, &.{
+                addCSourceFilesVersioned(b, raylib, &.{
                     "rglfw.c",
                 }, raylib_flags_arr.items);
                 raylib.linkSystemLibrary("GL");
@@ -115,8 +115,7 @@ pub fn addRaylib(b: *std.Build, target: anytype, optimize: std.builtin.OptimizeM
                 raylib.linkSystemLibrary("dl");
                 raylib.linkSystemLibrary("m");
 
-                raylib.addLibraryPath(.{ .path = "/usr/lib" });
-                raylib.addIncludePath(.{ .path = "/usr/include" });
+                raylib.addIncludePath(b.path(srcdir ++ "/external/glfw/include"));
 
                 switch (options.linux_display_backend) {
                     .X11 => {
@@ -129,7 +128,7 @@ pub fn addRaylib(b: *std.Build, target: anytype, optimize: std.builtin.OptimizeM
                         raylib.linkSystemLibrary("wayland-cursor");
                         raylib.linkSystemLibrary("wayland-egl");
                         raylib.linkSystemLibrary("xkbcommon");
-                        raylib.addIncludePath(.{ .path = srcdir });
+                        raylib.addIncludePath(b.path(srcdir));
                         try waylandGenerate(gpa, "wayland.xml", "wayland-client-protocol");
                         try waylandGenerate(gpa, "xdg-shell.xml", "xdg-shell-client-protocol");
                         try waylandGenerate(gpa, "xdg-decoration-unstable-v1.xml", "xdg-decoration-unstable-v1-client-protocol");
@@ -152,7 +151,7 @@ pub fn addRaylib(b: *std.Build, target: anytype, optimize: std.builtin.OptimizeM
                 raylib.linkSystemLibrary("rt");
                 raylib.linkSystemLibrary("m");
                 raylib.linkSystemLibrary("dl");
-                raylib.addIncludePath(.{ .path = "/usr/include/libdrm" });
+                raylib.addIncludePath(b.path("/usr/include/libdrm"));
 
                 raylib.defineCMacro("PLATFORM_DRM", null);
                 raylib.defineCMacro("GRAPHICS_API_OPENGL_ES2", null);
@@ -161,7 +160,7 @@ pub fn addRaylib(b: *std.Build, target: anytype, optimize: std.builtin.OptimizeM
             }
         },
         .freebsd, .openbsd, .netbsd, .dragonfly => {
-            addCSourceFilesVersioned(raylib, &.{
+            addCSourceFilesVersioned(b, raylib, &.{
                 "rglfw.c",
             }, raylib_flags_arr.items);
             raylib.linkSystemLibrary("GL");
@@ -180,7 +179,7 @@ pub fn addRaylib(b: *std.Build, target: anytype, optimize: std.builtin.OptimizeM
         .macos => {
             // On macos rglfw.c include Objective-C files.
             try raylib_flags_arr.append("-ObjC");
-            addCSourceFilesVersioned(raylib, &.{
+            addCSourceFilesVersioned(b, raylib, &.{
                 "rglfw.c",
             }, raylib_flags_arr.items);
             raylib.linkFramework("Foundation");
@@ -205,7 +204,7 @@ pub fn addRaylib(b: *std.Build, target: anytype, optimize: std.builtin.OptimizeM
             var dir = std.fs.openDirAbsolute(cache_include, std.fs.Dir.OpenDirOptions{ .access_sub_paths = true, .no_follow = true }) catch @panic("No emscripten cache. Generate it!");
             dir.close();
 
-            raylib.addIncludePath(.{ .path = cache_include });
+            raylib.addIncludePath(b.path(cache_include));
         },
         else => {
             @panic("Unsupported OS");
@@ -269,11 +268,7 @@ pub fn build(b: *std.Build) !void {
     b.installArtifact(lib);
 }
 
-const srcdir = struct {
-    fn getSrcDir() []const u8 {
-        return std.fs.path.dirname(@src().file).?;
-    }
-}.getSrcDir() ++ "/";
+const srcdir = "raylib/src";
 
 const waylandDir = srcdir ++ "external/glfw/deps/wayland";
 
@@ -286,20 +281,21 @@ fn getOsTagVersioned(target: anytype) std.Target.Os.Tag {
 }
 
 inline fn addCSourceFilesVersioned(
+    b: *std.Build,
     exe: *std.Build.Step.Compile,
     files: []const []const u8,
     flags: []const []const u8,
 ) void {
     if (comptime builtin.zig_version.minor >= 12) {
         exe.addCSourceFiles(.{
-            .root = .{ .path = srcdir },
+            .root = b.path(srcdir),
             .files = files,
             .flags = flags,
         });
     } else if (comptime builtin.zig_version.minor == 11) {
         inline for (files) |file| {
             exe.addCSourceFile(.{
-                .file = .{ .path = srcdir ++ file },
+                .file = b.path(srcdir ++ file),
                 .flags = flags,
             });
         }
diff --git a/src/rcore.c b/src/rcore.c
index 9705495e..d5375b87 100644
--- a/src/rcore.c
+++ b/src/rcore.c
@@ -473,7 +473,7 @@ extern void ClosePlatform(void);        // Close platform
 
 static void InitTimer(void);                                // Initialize timer, hi-resolution if available (required by InitPlatform())
 static void SetupFramebuffer(int width, int height);        // Setup main framebuffer (required by InitPlatform())
-static void SetupViewport(int width, int height);           // Set viewport for a provided width and height
+extern void SetupViewport(int width, int height);           // Set viewport for a provided width and height
 
 static void ScanDirectoryFiles(const char *basePath, FilePathList *list, const char *filter);   // Scan all files and directories in a base path
 static void ScanDirectoryFilesRecursively(const char *basePath, FilePathList *list, const char *filter);  // Scan all files and directories recursively from a base path
